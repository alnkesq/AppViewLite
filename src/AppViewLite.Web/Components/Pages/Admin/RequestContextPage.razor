@page "/debug/requests/{Guid:guid}"
@using System.Runtime.InteropServices
@layout AppViewLite.Web.Components.Layout.NoLayout
@inject NavigationManager Navigation

@code {

    [Parameter] public Guid Guid { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Zoom { get; set; }

    public int PixelsPerSecond => Zoom ?? 4096;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private double StopwatchTicksToPixels(long stopwatchTicks)
    {
        var timespan = BlueskyRelationshipsClientBase.StopwatchTicksToTimespan(stopwatchTicks);
        return timespan.TotalSeconds * PixelsPerSecond;
    }


}

@{
    var req = RequestContext.RecentRequestContextsUrgent.Concat(RequestContext.RecentRequestContextsNonUrgent)
        .FirstOrDefault(x => x.Guid == Guid);
    if (req == null) Navigation.NavigateTo("/debug/requests");
    var entries = req!.GetOperationEntriesPlusImportant();
    var lockLogs = req.LockLogEntries.OrderBy(x => x.Start.StopwatchTicks).ToArray();
    var allEntriesAndLogs = lockLogs.Concat(entries).ToArray();
    var firstStopwatchTicks = allEntriesAndLogs.Length != 0 ? allEntriesAndLogs.Min(x => x.Start.StopwatchTicks) : 0;
    var finalStopwatchTicks = req.CompletionTimeStopwatchTicks != 0 ? req.CompletionTimeStopwatchTicks : allEntriesAndLogs.Length != 0 ? allEntriesAndLogs.Max(x => x.End.StopwatchTicks) : 64;
}

<PageTitle>@req.ToString()</PageTitle>

<div style="position: fixed; margin-left: 10px;">
    <h3>@req.ToString()</h3>
    <a class="blue-link" href="/debug">Debug</a> |
    <a class="blue-link" href="/debug/requests">Requests</a> |
    <a class="blue-link" id="request-profiler-zoom-in" href="/debug/requests/@Guid?zoom=@(Math.Min(PixelsPerSecond * 2, 4 * 1024 * 1024))">Zoom in</a> |
    <a class="blue-link" id="request-profiler-zoom-out" href="/debug/requests/@Guid?zoom=@(Math.Max(PixelsPerSecond / 2, 32))">Zoom out</a>
</div>
<script>
    document.documentElement.style.overflowX = 'scroll';
    document.addEventListener('keydown', e => {
        if(e.key == '+'){
            document.getElementById('request-profiler-zoom-in').click();
        }
        if(e.key == '-'){
            document.getElementById('request-profiler-zoom-out').click();
        }
    });
</script>
<br>
<br>
<br>
<br>
<br>
<br>

@foreach (var exponent in Enumerable.Range(1, 10))
{
    var micros = Math.Pow(10, exponent);
    var timespan = TimeSpan.FromMicroseconds(micros);
    var pixels = timespan.TotalSeconds * PixelsPerSecond;
    if (pixels >= 64)
    {
        <div style="position: fixed; height: 12px; margin-left: 10px; border-left: 1px solid black; border-right: 1px solid black; width: @(pixels)px; text-align: center; border-top: 1px solid black">@StringUtils.ToHumanTimeSpanForProfiler(timespan)</div>
        break;
    }
}


<br>
<br>
<div class="performance-timeline" style="width: @(entries.Count != 0 ? (Math.Min(StopwatchTicksToPixels(finalStopwatchTicks - firstStopwatchTicks), 1024 * 1024)) : 64)px">

    @foreach (var b in entries)
    {
        var delta = b.End - b.Start;

        <div title="@b.TooltipText" class="performance-timeline-entry" style="background-color: @(delta.MaxGcGeneration != -1 ? "red" : b.TableName != null ? Program.HashToCssColor(b.TableName, b.Operation).ToString() : "transparent"); width: @(Math.Max(1, StopwatchTicksToPixels(delta.StopwatchTicks)))px; left: @(StopwatchTicksToPixels(b.Start.StopwatchTicks - firstStopwatchTicks))px;">
            @b.TableName
            @b.Operation
            @(delta.MaxGcGeneration != -1 ? $" [GC {delta.MaxGcGeneration}]" : null)
        </div>
        

    }

    @foreach (var b in lockLogs)
    {
        var delta = b.End - b.Start;

        <div title="@b.TooltipText" class="performance-timeline-lock performance-timeline-lock-@b.Operation" style="width: @(Math.Max(1, StopwatchTicksToPixels(delta.StopwatchTicks)))px; left: @(StopwatchTicksToPixels(b.Start.StopwatchTicks - firstStopwatchTicks))px;">
            @b.Operation
        </div>
    }
</div>
<br>
<br>
<br>
<table class="performance-timeline-summary-table">
    <tr>
        <th title="Name of database table" style="width: 250px;">Table</th>
        <th title="Type of database operation">Operation</th>
        <th title="Number of database operations">Count</th>
        <th title="Number of direct IO reads">Reads</th>
        <th title="Bytes that were read via direct IO">Read bytes</th>
        <th title="Bytes that might have been read via memory-mapped memory">Mmap bytes</th>
        <th title="% wall clock time spent in GetIndex binary searches">Seek%</th>
        <th title="Total wall clock time">Duration</th>
    </tr>
    
@foreach (var item in entries.GroupBy(x => (x.TableName, x.Operation)).Where(x => x.Key != default).Select(x => (x.Key.TableName, x.Key.Operation, Count: x.Count(), StopwatchTicks: x.Sum(y => y.Delta.StopwatchTicks), IoReadBytes: x.Sum(x => x.Delta.IoReadBytes), IoReads: x.Sum(x => x.Delta.IoReads), PotentialMmapBytes: x.Sum(x => x.Delta.MmapPotentialReadBytes), SeekStopwatchTicks: x.Sum(x => x.Delta.SeekStopwatchTicks))).OrderByDescending(x => x.StopwatchTicks))
{
        <tr>
            <td>@item.TableName</td>
            <td>@item.Operation</td>
            <td>@item.Count</td>
            <td>@item.IoReads</td>
            <td>@(StringUtils.ToHumanBytes(item.IoReadBytes, allowByteGranularity: true))</td>
            <td>@(StringUtils.ToHumanBytes(item.PotentialMmapBytes, allowByteGranularity: true))</td>
            <td>@((100.0 * item.SeekStopwatchTicks / item.StopwatchTicks).ToString("0"))%</td>
            <td>
                    
                <div class="performance-timeline-summary-group" style="background: @Program.HashToCssColor(item.TableName!, item.Operation!); width: @StopwatchTicksToPixels(item.StopwatchTicks)px;">
                    @StringUtils.ToHumanTimeSpanForProfiler(BlueskyRelationshipsClientBase.StopwatchTicksToTimespan(item.StopwatchTicks))
                </div>
            </td>
    </tr>
}
</table>

