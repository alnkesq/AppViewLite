@page "/login"
@inject RequestContext RequestContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject BlueskyEnrichedApis Apis

<PageTitle>Login</PageTitle>
<h1>@(RequestContext.IsLoggedIn ? "Add a logged in account" : "Login")</h1>
<form method="post" @onsubmit="Submit" @formname="loginForm" class="main-padding">
    <AntiforgeryToken />
    <div>
        <label>
            Handle:<br>
            <InputText @bind-Value="Model!.Handle" tabindex="1" autocorrect="off" />
        </label>
    </div>
    <br>
    <div>
        <label>
            Password (or <a href="https://bsky.app/settings/app-passwords" target="_blank" class="blue-link" tabindex="4">app-specific</a> password):<br>
            <InputText @bind-Value="Model!.Password" type="password" tabindex="2" />
        </label>
        @if (BlueskyEnrichedApis.AllowPublicReadOnlyFakeLogin)
        {
            <div><i>Use 'readonly' for a simulated login.<br>You won't be able to perform write actions to your repository.</i></div>
        }
    </div>
    <br>
    <div>
        <button type="submit" tabindex="3">Log in</button>
    </div>
</form>

@code {
    [SupplyParameterFromForm]
    private LoginData? Model { get; set; }

    [Parameter] [SupplyParameterFromQuery] public string? Return { get; set; }

    protected override void OnInitialized()
    {
        // if (RequestContext.IsLoggedIn) Navigation.NavigateTo("/following", true);
        Model ??= new();
    }

    private async Task Submit()
    {
        if (!string.IsNullOrEmpty(Model!.Handle) && !string.IsNullOrEmpty(Model!.Password))
        {
            var cookies = ParsedMultisessionCookie.Parse(HttpContextAccessor.HttpContext!.Request.Cookies[ParsedMultisessionCookie.CookieName]);
            var (session, cookie, allSessions) = await Apis.AddToLogInAsync(Model.Handle, Model.Password, cookies, RequestContext);
            HttpContextAccessor.HttpContext!.Response.AppendEssentialCookie(ParsedMultisessionCookie.CookieName, allSessions.ToString()!);
            Navigation.NavigateTo(Return ?? "/following", true);
        }
    }

    public class LoginData
    {
        public string? Handle { get; set; }
        public string? Password { get; set; }
    }
}


