@page "/@{did}"
@page "/@{did}@{activityPubInstance}"
@inherits ProfileComponentBase
@inject NavigationManager Navigation

@code {
    [Parameter][SupplyParameterFromQuery] public int? Replies { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Reposts { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Likes { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Media { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Bookmarks { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Labeler { get; set; }

    [Parameter][SupplyParameterFromQuery] public string? Continuation { get; set; }
    private string? NextContinuation;
    private FacetData[]? GuessedFacets;
    public IReadOnlyList<BlueskyModerationBase> LabelerLabels = [];

    public bool ShowMediaOnly => (Media ?? 0) != 0;
    public bool ShowLikes => (Likes ?? 0) != 0;
    public bool ShowReplies => !ShowLikes && !ShowBookmarks && (Replies ?? (ShowMediaOnly ? 1 : 0)) != 0;
    public bool ShowReposts => !ShowLikes && !ShowBookmarks && (Reposts ?? (ShowReplies || ShowMediaOnly ? 0 : 1)) != 0;
    public bool ShowBookmarks => (Bookmarks ?? 0) != 0;
    public bool ShowLabels => (Labeler ?? 0) != 0;

    // [Parameter] public string? DidUnprefixed { get; set; }
    // public string? Did => DidUnprefixed != null ? "did:" + DidUnprefixed : null;
    private BlueskyFullProfile? Profile;
    private BlueskyPost[] Posts = [];
    const int MaxFollowersYouFollowNames = 3; // A, B and C    *or*   A, B and 2 others
    const int MaxFollowersYouFollowAvatars = 3;
    private BlueskyProfileBasicInfo? data;
    private string? pluggableExternalUrl;
    private string? description;
    private string? anchorTargetForProfileUrl;
    private string? RssError;
    public BlueskyProfile SimpleProfile => Profile!.Profile;
    private AppViewLite.PluggableProtocols.ActivityPub.ActivityPubUserId? BridgyMirroredProfile;
    protected override async Task OnParametersSetAsync()
    {
        await ResolveDidAsync();
        Profile = await Apis.GetFullProfileAsync(Did, RequestContext, Math.Max(MaxFollowersYouFollowNames, MaxFollowersYouFollowAvatars));

        data = SimpleProfile.BasicData;
        description = data?.Description;
        if (description != null && description.EndsWith("on the fediverse by https://fed.brid.gy/ ]", StringComparison.Ordinal) && SimpleProfile.PossibleHandle != null)
        {
            var suffix = description.IndexOf("[bridged from ");
            if(suffix != -1)
            {
                try
                {
                    BridgyMirroredProfile = AppViewLite.PluggableProtocols.ActivityPub.ActivityPubUserId.Parse(SimpleProfile.PossibleHandle!);
                    description = description.Substring(0, suffix).Trim();
                    if (string.IsNullOrEmpty(description)) description = null;
                }
                catch
                {
                }
            }
        }
        pluggableExternalUrl = SimpleProfile.PluggableProtocol?.TryGetOriginalProfileUrl(SimpleProfile);
        anchorTargetForProfileUrl = pluggableExternalUrl != null ? "_blank" : null;
        GuessedFacets = data?.GetOrGuessFacets();
        if (ShowLabels)
        {
            var labels = Continuation == null && SimpleProfile?.DidDoc?.AtProtoLabeler != null ? (await Apis.GetLabelerLabelsAsync(Did, RequestContext)) : [];
            var lists = await Apis.GetProfileListsAsync(Did, Continuation, default, RequestContext);
            LabelerLabels = ((IEnumerable<BlueskyModerationBase>)labels).Concat(lists.Lists.Where(x => !labels.Any(y => y.DisplayNameOrFallback == x.DisplayNameOrFallback))).ToArray();
            NextContinuation = lists.NextContinuation;
        }
        else
        {
            (Posts, NextContinuation) = await Apis.GetUserPostsAsync(
                Did,
                includePosts: !ShowLikes && !ShowBookmarks,
                includeReplies: ShowReplies ? AuthorFeedShowReplies.AllReplies : AuthorFeedShowReplies.RepliesToOwnPostsOnly,
                includeReposts: ShowReposts,
                includeLikes: ShowLikes,
                includeBookmarks: ShowBookmarks,
                mediaOnly: ShowMediaOnly,
                limit: default,
                continuation: Continuation,
                ctx: RequestContext,
                forGrid: ShowMediaOnly);
        }
        RssError = Profile.RssFeedInfo?.RssErrorMessage;
        if(Profile.RssFeedInfo?.RedirectsTo != null)
        {
            Navigation.NavigateTo("/rss/" + Profile.RssFeedInfo.RedirectsTo);
        }
        if (RssError != null && Posts.Length == 0)
            throw new UnexpectedFirehoseDataException(RssError);
    }
}

<PageTitle>@Profile?.Profile.DisplayNameOrFallback</PageTitle>


@if (Profile != null)
{
    <div class="profile-page @(SimpleProfile.BlockReason != default || SimpleProfile.Labels!.Any(x => x.Mode == ModerationBehavior.Mute) ? "profile-page-blocked" : null)">
        <div class="profile-banner @(SimpleProfile.HasBannerImage ? null : "profile-banner-no-image")" style="@(!SimpleProfile.HasBannerImage && SimpleProfile.PluggableProtocol?.GetDefaultBannerColor(SimpleProfile.Did) is {} defaultColor ? "background-color: " + defaultColor : null)">
            @if (SimpleProfile.HasBannerImage)
            {
                <img src="@Apis.GetImageBannerUrl(Did, SimpleProfile.BasicData!.BannerCidBytes!, SimpleProfile.Pds)" />
            }
        </div>
        <a class="main-padding profile-image-large-link" href="@Apis.GetImageUrl(ThumbnailSize.avatar, Did, SimpleProfile.BasicData?.AvatarCidBytes, SimpleProfile.Pds)" target="_blank">
            <img src="@SimpleProfile.AvatarUrl" class="profile-image-large" />
        </a>
        <h1 class="main-padding">
            <TextWithFacets Text="@SimpleProfile.DisplayNameOrFallback" Facets="@SimpleProfile.BasicData?.DisplayNameFacets" IsProfileDisplayName="true"></TextWithFacets>
            <ProfileBadges Profile="@SimpleProfile" />
        </h1>

        <div class="main-padding">
            @if (SimpleProfile.BlockReason != default || SimpleProfile.FollowsYou)
            {
                var (blurReasonText, blurReasonFacets) = SimpleProfile.GetDisplayInverseFollowRelationship(RequestContext);
                <span class="profile-follow-relationship"><TextWithFacets Text="@blurReasonText" Facets="@blurReasonFacets" /></span>
            }
            <ProfileHandle Profile="@SimpleProfile" />
        </div>

        <div class="profile-follow-area" data-profiledid="@SimpleProfile.Did" data-followrkey="@SimpleProfile.FollowRKeyForAttribute" data-blockrkey="@SimpleProfile.BlockRKeyForAttribute" data-followsyou="@SimpleProfile.FollowsYouForAttribute">
            @if (RequestContext.IsLoggedIn && SimpleProfile.Plc != RequestContext.LoggedInUser && SimpleProfile.BlockReason == default && SimpleProfile.IsActive)
            {
                <FollowButton Profile="@SimpleProfile" />
            }
            else if(SimpleProfile.IsBlockedBySelf != null)
            {
                <button class="unblock-button" actionkind="toggleBlock">Unblock</button>

            }

            <div class="menu-button-wrapper">
                <div class="profile-menu menu">

                    @if(SimpleProfile.PluggableProtocol?.TryGetOriginalProfileUrl(SimpleProfile) is {} externalUrl)
                    {
                        <a href="@externalUrl" class="menu-item" target="_blank" rel="noreferrer">View on @(StringUtils.GetDisplayHost(new Uri(externalUrl)))</a>
                    }
                    @if (BlueskyRelationships.IsNativeAtProtoDid(SimpleProfile.Did))
                    {
                        <a href="@SimpleProfile.BlueskyUrl" class="menu-item" target="_blank" rel="noreferrer">View on Bluesky</a>
                        <button actionkind="copyProfileBlueskyUrl" class="menu-item">Copy Bluesky URL</button>
                    }
                    @if (SimpleProfile.PluggableProtocol is AppViewLite.PluggableProtocols.Rss.RssProtocol)
                    {
                        <a href="@(AppViewLite.PluggableProtocols.Rss.RssProtocol.DidToUrl(SimpleProfile.Did))" class="menu-item" target="_blank" rel="noreferrer">View feed source</a>
                    }


                    <button actionkind="copyProfileUrl" class="menu-item">Copy profile URL</button>
                    @if (SimpleProfile.IsActive)
                    {
                        <a href="/search?q=from:@(SimpleProfile.HandleIsUncertain || SimpleProfile.PossibleHandle == null ? SimpleProfile.Did : SimpleProfile.PossibleHandle)%20" class="menu-item">Search posts…</a>
                    }
                    @if(SimpleProfile.PluggableProtocol == null)
                    {
                        <a href="@SimpleProfile.BaseUrl/blocking" class="menu-item menu-item-advanced">Show blocked profiles</a>
                        <a href="@SimpleProfile.BaseUrl/blocklist-subscriptions" class="menu-item menu-item-advanced">Show blocklist subscriptions</a>
                        <a href="@SimpleProfile.BaseUrl/blocked-by" class="menu-item menu-item-advanced">Show blockers</a>
                        <a href="@SimpleProfile.BaseUrl/member-of" class="menu-item menu-item-advanced">Show list memberships</a>
                        @if (RequestContext.IsLoggedIn && SimpleProfile.Plc == RequestContext.LoggedInUser)
                        {
                            <a href="/notifications?dark=1" class="menu-item menu-item-advanced" data-alwaysfocuspage="1">Show dark notifications</a>
                        }
                        <a href="@SimpleProfile.BaseUrl/indexing" class="menu-item">Index this profile…</a>
                    }
                    @if (RequestContext.IsLoggedIn && SimpleProfile.Plc != RequestContext.LoggedInUser)
                    {
                        @if (SimpleProfile.BlockReason == default || SimpleProfile.IsFollowedEvenPrivatelyBySelf)
                        {
                            <button actionkind="toggleFollow" data-followkind="private" class="menu-item @(SimpleProfile.IsFollowedViaAtProto != null ? "display-none" : null)">@(SimpleProfile.IsFollowedEvenPrivatelyBySelf ? "Unfollow (private)" : "Follow privately")</button>

                            @if (SimpleProfile.BlockReason == default)
                            {
                                @if (SimpleProfile.HasPrivateFollowFlag(PrivateFollowFlags.MuteImageNonFollowedReposts))
                                {
                                    <PrivateFollowPostKindToggleButton User="@SimpleProfile" ImageFlag="@PrivateFollowFlags.MuteImageNonFollowedReposts" TextualFlag="@PrivateFollowFlags.MuteTextualNonFollowedReposts" />
                                }
                                @if (SimpleProfile.HasPrivateFollowFlag(PrivateFollowFlags.MuteImageSelfReposts))
                                {
                                    <PrivateFollowPostKindToggleButton User="@SimpleProfile" ImageFlag="@PrivateFollowFlags.MuteImageSelfReposts" TextualFlag="@PrivateFollowFlags.MuteTextualSelfReposts" />
                                }


                                @if (SimpleProfile.HasPrivateFollowFlag(PrivateFollowFlags.MuteAllPosts) != SimpleProfile.HasPrivateFollowFlag(PrivateFollowFlags.MuteImagePosts))
                                {
                                    <PrivateFollowToggleButton User="@SimpleProfile" Flag="@PrivateFollowFlags.MuteImagePosts" />
                                }


                                <PrivateFollowToggleButton User="@SimpleProfile" Flag="@PrivateFollowFlags.MuteAllPosts" />
                            }
                        }
                        @if (SimpleProfile.PluggableProtocol == null)
                        {
                            <button actionkind="toggleBlock" class="menu-item">@(SimpleProfile.IsBlockedBySelf != null ? "Unblock" : "Block")</button>
                        }
                    }
                </div>

                <button class="post-action-bar-button">
                    <svg fill="none" viewBox="0 0 24 24" width="20" height="20" style="pointer-events: none;"><path fill="hsl(211, 20%, 53%)" fill-rule="evenodd" clip-rule="evenodd" d="M2 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm16 0a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm-6-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"></path></svg>
                </button>
            </div>
        </div>

        <div class="profile-follow-links main-padding">
            @{
                var followingUrl = SimpleProfile.FollowingUrl;
                var followersUrl = SimpleProfile.FollowersUrl;
                var shouldShowFollowing = followingUrl != null || data?.PluggableProtocolFollowingCount != null;
                var shouldShowFollowers = followersUrl != null || data?.PluggableProtocolFollowerCount != null;
            }
            @if (shouldShowFollowers)
            {
                var followerCount = data?.PluggableProtocolFollowerCount ?? Profile.Followers;
                <a href="@followersUrl" target="@anchorTargetForProfileUrl" class="underline-on-hover">@(followerCount >= 10 ? StringUtils.FormatEngagementCount(followerCount) : null) Followers</a>
            }
            @if(shouldShowFollowers && shouldShowFollowing)
            {
                <text> · </text>
            }
            @if (shouldShowFollowing)
            {
                var followingCount = data?.PluggableProtocolFollowingCount ?? 0;
                <a href="@followingUrl" target="@anchorTargetForProfileUrl" class="underline-on-hover">@(followingCount != 0 ? StringUtils.FormatEngagementCount(followingCount) : null) Following</a>
            }
            @if (RequestContext.IsLoggedIn && RequestContext.LoggedInUser == SimpleProfile.Plc)
            {
                <text> · </text>
                <a href="@SimpleProfile.BaseUrl/following-private" class="underline-on-hover">Following (private)</a>
            }
            @if (RequestContext.IsLoggedIn && RequestContext.LoggedInUser == SimpleProfile.Plc)
            {
                <text> · </text>
                <a href = "@SimpleProfile.BaseUrl/known-followers" class="underline-on-hover">Mutuals</a>
            }
        </div>

        <div class="profile-description main-padding">
            <TextWithFacets Text="@description" Facets="@GuessedFacets" />
            @if (pluggableExternalUrl != null && SimpleProfile.PluggableProtocol!.ShouldDisplayExternalLinkInBio)
            {
                @if (@description != null)
                {
                    <br>

                    <br>
                }
                <a href="@pluggableExternalUrl" rel="noreferrer" target="_blank" class="blue-link display-block">@StringUtils.GetDisplayUrl(new Uri(pluggableExternalUrl))</a>
            }
            @if (BridgyMirroredProfile != null)
            {
                var fediDid = AppViewLite.PluggableProtocols.ActivityPub.ActivityPubProtocol.GetDid(BridgyMirroredProfile.Value);
                var fediUrl = AppViewLite.PluggableProtocols.ActivityPub.ActivityPubProtocol.Instance!.TryGetOriginalProfileUrl(new BlueskyProfile { Did = fediDid });
                @if (@description != null)
                {
                    <br>

                    <br>
                }
                <text>Mirrored from <a href="/@("@" + fediDid)" class="blue-link">@BridgyMirroredProfile.Value</a> by <a href="https://fed.brid.gy/" target="_blank" class="blue-link" rel="noreferrer">fed.brid.gy</a><br><a href="@fediUrl" rel="noreferrer" target="_blank" class="blue-link">@StringUtils.GetDisplayUrl(new Uri(fediUrl))</a></text>
            }
        </div>


        @if (RssError != null)
        {
            <div class="rss-fetch-error main-padding">
                @RssError
            </div>
        }

        @if (Profile.FollowedByPeopleYouFollow != null && Profile.FollowedByPeopleYouFollow.Count != 0 && RequestContext.LoggedInUser != SimpleProfile.Plc)
        {
            var knownFollowerCount = Profile.FollowedByPeopleYouFollow.Count;
            <a class="profile-followers-you-follow main-padding" href="@SimpleProfile.BaseUrl/known-followers">
                <span class="profile-followers-you-follow-avatars">
                    @foreach (var user in Profile.FollowedByPeopleYouFollow.Take(MaxFollowersYouFollowAvatars).Index())
                    {
                        <div class="profile-followers-you-follow-avatar" style="z-index: @(-user.Index);">
                            <img src="@user.Item.AvatarUrl" class="profile-image-small">
                        </div>
                    }
                </span>
                <span class="profile-followers-you-follow-text">
                    Followed by @(
                knownFollowerCount <= MaxFollowersYouFollowNames 
            ? StringUtils.AndJoin(Profile.FollowedByPeopleYouFollow.Select(x => x.DisplayNameOrFallback).ToArray())
            : (StringUtils.AndJoin(Profile.FollowedByPeopleYouFollow.Take(MaxFollowersYouFollowNames - 1).Select(x => x.DisplayNameOrFallback).ToArray()) + " and " + (knownFollowerCount - (MaxFollowersYouFollowNames - 1)) + " others")
            )
                </span>
            </a>
        }

        @if (SimpleProfile.DidDoc?.EarliestDateApprox16 is { } earliestDate)
        {
            <div class="profile-join-date main-padding">
                <text>Joined </text>
                @(((DateTime)new AppViewLite.Numerics.ApproximateDateTime16(earliestDate)).ToString("MMMM yyyy"))
            </div>
        }

        <LabelBadges Labels="@SimpleProfile.Labels" ExtraClass="profile-labels main-padding" />

        <div class="tabbed-lists-header">
            <div class="tabbed-lists-header-inner">

                @if (SimpleProfile.DidDoc?.AtProtoLabeler != null)
                {
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?labeler=1")">Labeler</NavLink>
                }
                <NavLink draggable="false" Match="NavLinkMatch.All" href="@SimpleProfile.BaseUrl">Posts</NavLink>
                @if (SimpleProfile.PluggableProtocol == null || SimpleProfile.PluggableProtocol.ShouldShowRepliesTab(SimpleProfile))
                {
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?replies=1")">Replies</NavLink>
                }
                @if (SimpleProfile.PluggableProtocol == null || SimpleProfile.PluggableProtocol.ShouldShowMediaTab(SimpleProfile))
                {
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?media=1")">Media</NavLink>
                }
                @if (SimpleProfile.PluggableProtocol == null)
                {
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?reposts=0&replies=0")">Original posts</NavLink>
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?likes=1")">Likes</NavLink>
                    @if(RequestContext.IsLoggedIn && SimpleProfile.Plc == RequestContext.LoggedInUser)
                    {
                        <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?bookmarks=1")">Bookmarks</NavLink>
                    }
                    @if (Profile.HasFeeds)
                    {
                        <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "/feeds")">Feeds</NavLink>
                    }
                }
                @if (Profile.HasLists && SimpleProfile.DidDoc?.AtProtoLabeler == null)
                {
                    <NavLink draggable="false" Match="NavLinkMatch.All" href="@(SimpleProfile.BaseUrl + "?labeler=1")">Lists</NavLink>
                }
            </div>
        </div>


        @if(SimpleProfile.IsActive)
        {
            @if (ShowLabels)
            {
                <ListList Lists="LabelerLabels" NextContinuation="@NextContinuation" ShowModerator="false" />
            }
            else
            {
                <PostList Posts="@Posts" NextContinuation="@NextContinuation" ShowAsGrid="@ShowMediaOnly" />
            }

        }
        else
        {
            <div class="profile-account-error main-padding">
                @DefaultLabels.GetErrorForAccountState(SimpleProfile.AccountState, SimpleProfile.Pds)
            </div>
        }

        @if (pluggableExternalUrl != null)
        {
            <div class="profile-link-to-full-profile">
                <a href="@pluggableExternalUrl" target="_blank" rel="noreferrer">See full profile on @StringUtils.GetDisplayHost(new Uri(pluggableExternalUrl))</a>
            </div>
        }
    </div>
}

