@using AppViewLite.Numerics
@inject NavigationManager NavigationManager
@inject RequestContext RequestContext
@inject BlueskyEnrichedApis Apis

@code {
    [Parameter]
    public required BlueskyPost Post { get; set; }

    [Parameter]
    public RequestContext? RequestContextOverride { get; set; }

    [Parameter]
    public bool IsQuote { get; set; }

    [Parameter]
    public bool ShowInReplyTo { get; set; } = true;

    [Parameter]
    public bool IsLastOfGroup { get; set; }

    [Parameter]
    public bool ShowRestOfThreadLink { get; set; }

    [Parameter]
    public bool IsFocalPost { get; set; }

    [Parameter]
    public bool ShowThreadLine { get; set; }

    [Parameter]
    public bool IsThreadView { get; set; }

    [Parameter]
    public bool IsQuoteList { get; set; }

    [Parameter]
    public bool VideoAutoPlay { get; set; }

    // If you add [Parameter] flags, update RenderFlags serialization and deserialization.


#nullable disable
    private AsyncStateToggler IsLiked;
    private AsyncStateToggler IsReposted;
    private string baseUrlPreferExternal;
    public string RenderFlags;
#nullable restore

    private string? externalDomainForMute;
    private string? originalPostUrl;
    private string? targetForBaseUrlPreferExternal;


    private bool HasBskyAppUrl => BlueskyRelationships.IsNativeAtProtoDid(Post.Did);
    private bool HasExternalUrl => originalPostUrl != null;



    public static ParameterView CreateParametersForRenderFlags(BlueskyPost post, string renderFlags, RequestContext ctx)
    {
        var flags = renderFlags.Select(x => x == '1').ToArray();
        return ParameterView.FromDictionary(new Dictionary<string, object?>() 
        {
            { nameof(PostRow.Post), post },
            { nameof(PostRow.RequestContextOverride), ctx },

            { nameof(PostRow.IsQuote), flags[0] },
            { nameof(PostRow.ShowInReplyTo), flags[1] },
            { nameof(PostRow.IsLastOfGroup), flags[2] },
            { nameof(PostRow.ShowRestOfThreadLink), flags[3] },
            { nameof(PostRow.IsFocalPost), flags[4] },
            { nameof(PostRow.ShowThreadLine), flags[5] },
            { nameof(PostRow.IsThreadView), flags[6]},
            { nameof(PostRow.IsQuoteList), flags[7]},
            { nameof(PostRow.VideoAutoPlay), flags[8]},
        });

    }

    private bool isSelfRepost;
    private BlockReasonDisplayStringAndList? blurReason;
    private string? blurReasonText;
    private FacetData[]? blurReasonFacets;


    protected override void OnParametersSet()
    {
        if (RequestContextOverride != null)
            RequestContext = RequestContextOverride;

        RenderFlags = string.Join(null, new[]
        {
             IsQuote,
             ShowInReplyTo,
             IsLastOfGroup,
             ShowRestOfThreadLink,
             IsFocalPost,
             ShowThreadLine,
             IsThreadView,
             IsQuoteList,
             VideoAutoPlay,
        }.Select(x => x ? "1" : "0"));



        IsLiked = new AsyncStateToggler(
            Post.LikeCount, 
            Post.IsLikedBySelf, 
            () => Apis.CreatePostLikeAsync(Post.Did, Post.PostId.PostRKey, RequestContext),
            rkey => Apis.DeletePostLikeAsync(rkey, RequestContext), 
            StateHasChanged);

        IsReposted = new AsyncStateToggler(
            Post.RepostCount,
            Post.IsRepostedBySelf,
            () => Apis.CreateRepostAsync(Post.Did, Post.PostId.PostRKey, RequestContext),
            rkey => Apis.DeleteRepostAsync(rkey, RequestContext),
            StateHasChanged);

        blurReason = Post.GetBlurReason(IsFocalPost, IsQuote, IsThreadView, IsQuoteList, RequestContext);
        if (blurReason != null)
            (blurReasonText, blurReasonFacets) = blurReason.ToTextWithFacets();

        isSelfRepost = Post.IsRepost && Post.RepostedBy!.Plc == Post.Author.Plc;

        externalDomainForMute = Post.GetExternalDomainForMuteHint();

        originalPostUrl = Post.OriginalPostUrl;
        baseUrlPreferExternal = originalPostUrl ?? Post.BaseUrl;
        targetForBaseUrlPreferExternal = originalPostUrl != null ? "_blank" : null;

        var pluggable = BlueskyRelationships.TryGetPluggableProtocolForDid(Post.Did);
        ShouldUseCompactView = Post.Data?.Media?.Length > 1 || IsQuote || (Post.ShouldUseCompactView && !IsFocalPost);
        ReusesThumbForFullSizeImage = Post.PluggableProtocol?.ReusesThumbImageForFullSizeImages(Post) == true;
    }

    public BlueskyProfile OriginalAuthor => Post.Author;
    public BlueskyProfile ReposterOrAuthor => Post.RepostedBy ?? OriginalAuthor;
    public bool UseBookmarkButton => Post.PluggableProtocol != null || (RequestContext.IsLoggedIn && RequestContext.UserContext.PrivateProfile!.AlwaysPreferBookmarkButton);

    private bool ShouldUseCompactView;
    private bool ReusesThumbForFullSizeImage;

    private bool IsBusy;
    private async Task PerformActionIfNotBusyAsync(Func<Task> func)
    {
        if (IsBusy) return;
        IsBusy = true;
        try
        {
            await func();
        }
        finally
        {
            IsBusy = false;
        }

    }

}




<li class="post @(IsFocalPost ? "post-focal" : null) @(Post.PluggableProtocol?.ShouldUseCompactMediaThumbnails(Post) == true ? "post-small-media-thumbnail" : null) @(Post.IsMuted ? "post-muted" : null) @(IsLastOfGroup ? "post-last-of-group" : null) @(blurReason != null ? "post-blocked" : null) @(Post.QuotedPost != null && !IsQuote ? "post-has-quote" : null)"
    @key="@(Post.RKey + "/" + Post.Did)" 
    data-postdid="@Post.Did" data-postrkey="@Post.RKey"
    data-likecount="@Post.LikeCount"
    data-likerkey="@Post.IsLikedBySelf?.ToString()"
    data-bookmarkrkey="@Post.IsBookmarkedBySelf?.ToString()"
    data-repostcount="@Post.RepostCount"
    data-quotecount="@Post.QuoteCount"
    data-repostrkey="@Post.IsRepostedBySelf?.ToString()"
    data-repostedby="@Post.RepostedBy?.Did"
    data-renderflags="@RenderFlags"
    data-usebookmarkbutton="@(UseBookmarkButton ? 1 : 0)"
    data-replychainlength="@Post.ReplyChainLength"
    data-pendingload="@(Post.Data == null || Post.Author.BasicData == null || Post.RequiresLateOpenGraphData ? 1 : 0)"
    data-displayshortdate="@StringUtils.ToHumanDate(Post.Date)">
    <a href="@baseUrlPreferExternal" target="@targetForBaseUrlPreferExternal" class="post-background-link" tabindex="-1"></a>

    @if (ShowRestOfThreadLink)
    {
        <div class="post-thread-continuation-line"></div>
        <a class="post-rest-of-thread post-indented blue-link" href="@baseUrlPreferExternal" target="@targetForBaseUrlPreferExternal">View full thread</a>
    }

    @if (ShowThreadLine && !IsLastOfGroup && !IsFocalPost)
    {
        <div class="post-thread-line"></div>
    }


    @if (Post.RepostedBy != null)
    {
        <div class="post-reposted-by post-indented">
            <svg class="post-reposted-by-icon" fill="none" width="13" height="13" viewBox="0 0 24 24" style="color: rgb(66, 87, 108); margin-right: 3px;"><path fill="hsl(211, 24%, 34.2%)" fill-rule="evenodd" clip-rule="evenodd" d="M17.957 2.293a1 1 0 1 0-1.414 1.414L17.836 5H6a3 3 0 0 0-3 3v3a1 1 0 1 0 2 0V8a1 1 0 0 1 1-1h11.836l-1.293 1.293a1 1 0 0 0 1.414 1.414l2.47-2.47a1.75 1.75 0 0 0 0-2.474l-2.47-2.47ZM20 12a1 1 0 0 1 1 1v3a3 3 0 0 1-3 3H6.164l1.293 1.293a1 1 0 1 1-1.414 1.414l-2.47-2.47a1.75 1.75 0 0 1 0-2.474l2.47-2.47a1 1 0 0 1 1.414 1.414L6.164 17H18a1 1 0 0 0 1-1v-3a1 1 0 0 1 1-1Z"></path></svg>
            @if(Post.RepostedBy.PluggableProtocol?.RepostsAreCategories == true)
            {
                <text>Posted on </text>
            }
            else
            {
                <text>Reposted by </text>
            }
            <InlineProfileLink Profile="@Post.RepostedBy" />
        </div>
    }

    @if (blurReason != null)
    {
        <div class="post-blur-reason-container">
            <div class="post-blur-reason"><TextWithFacets Text="@blurReasonText" Facets="@blurReasonFacets" /></div>
        </div>

    }

    <div class="post-author-image-link-container">
        <a href="@Post.Author.HomeUrl" class="post-author-image-link" tabindex="-1">
            <img src="@Post.Author.AvatarUrl" class="post-author-image">
        </a>
    </div>

    @if (IsFocalPost && RequestContext.IsLoggedIn && Post.Author.Plc != RequestContext.LoggedInUser && Post.Author.IsFollowedBySelf == null && Post.Author.BlockReason == default)
    {
        <div class="post-follow-area" data-profiledid="@OriginalAuthor.Did" data-followrkey="@OriginalAuthor.FollowRKeyForAttribute" data-followsyou="@OriginalAuthor.FollowsYouForAttribute">
            <FollowButton Profile="@Post.Author" />
        </div>
    }

    <div class="post-meta @(IsFocalPost ? "post-meta-focal" : "post-meta-nonfocal") post-indented">
        <a class="post-author underline-on-hover" href="@Post.Author.HomeUrl">
            <TextWithFacets Text="@Post.Author.DisplayNameOrFallback" Facets="@Post.Author.BasicData?.DisplayNameFacets" IsProfileDisplayName="true"></TextWithFacets>
        </a>
        <ProfileBadges Profile="@Post.Author" />
        <ProfileHandle Profile="@Post.Author" />
        @if(!this.IsFocalPost)
        {
            <text> Â·</text>
            <a class="post-date" href="@baseUrlPreferExternal" target="@targetForBaseUrlPreferExternal" title="@StringUtils.ToFullHumanDate(Post.Date)">@StringUtils.ToHumanDate(Post.Date)</a>
        }
    </div>


    @if ((ShowInReplyTo && Post.InReplyToUser != null) || Post.Data?.IsReplyToUnspecifiedPost == true)
    {
        <div class="post-in-reply-to post-indented">
            <svg class="post-in-reply-to-icon" viewBox="0 0 512 512" height="9" width="9" tabindex="-1" style="margin-right: 5px;"><path fill="hsl(211, 24%, 34.2%)" d="M205 34.8c11.5 5.1 19 16.6 19 29.2v64H336c97.2 0 176 78.8 176 176c0 113.3-81.5 163.9-100.2 174.1c-2.5 1.4-5.3 1.9-8.1 1.9c-10.9 0-19.7-8.9-19.7-19.7c0-7.5 4.3-14.4 9.8-19.5c9.4-8.8 22.2-26.4 22.2-56.7c0-53-43-96-96-96H224v64c0 12.6-7.4 24.1-19 29.2s-25 3-34.4-5.4l-160-144C3.9 225.7 0 217.1 0 208s3.9-17.7 10.6-23.8l160-144c9.4-8.5 22.9-10.6 34.4-5.4z"></path></svg>
            <span>
                @if(Post.InReplyToUser != null)
                {
                    <text>Replying to</text>
                    <InlineProfileLink Profile="@Post.InReplyToUser" />
                }
                else
                {
                    <text>Replying to a post</text>
                }
            </span>
        </div>
    }
    <LabelBadges Labels="@Post.AllLabels.ToArray()" ExtraClass="post-indented" />

    @if (Post.Data == null || Post.Data.Error != null)
    {

        <div class="post-error post-indented">[@(StringUtils.TrimFinalPeriod(Post.Data?.Error ?? "Not loaded yet"))]</div>
    }
    <div class="post-body post-indented">
        <TextWithFacets Text="@(Post.Data?.Text)" Facets="@Post.Data?.Facets" />
    </div>

    @if (Post.Data?.EmbedRecordUri != null)
    {
        @if (Post.EmbedRecord is BlueskyFeedGenerator feed)
        {
            <div class="post-link-list post-indented">
                <a href="@feed.BaseUrl" class="blue-link">Feed: @feed.DisplayNameOrFallback</a>
            </div>
        }
        else if (Post.EmbedRecord is BlueskyList list)
        {
            <div class="post-link-list post-indented">
                <a href="@list.BaseUrl" class="blue-link">List: @list.DisplayNameOrFallback</a>
            </div>
        }
        else
        {
            <div class="post-link-list post-indented">@Post.Data.EmbedRecordUri</div>
        }
    }
    @if (Post.Data?.ExternalUrl != null)
    {
        @if (Post.Data.ExternalUrl.StartsWith("https://media.tenor.com/"))
        {
            <div class="post-external-gif post-indented">
                <img src="@Post.Data.ExternalUrl" rel="noreferrer" title="@Post.Data.ExternalTitle">
            </div>
        }
        else
        {
            <a class="post-external-preview @((ShouldUseCompactView && Post.HasExternalThumbnailBestGuess) ? "post-external-preview-compact" : null) post-indented" target="_blank" rel="noreferrer" href="@Post.Data.ExternalUrl">
                @if (Post.HasExternalThumbnail && !Post.Author.IsMediaBlockedByAdministrativeRule)
                {
                    <img class="post-external-preview-image" src="@Apis.GetExternalThumbnailUrl(Post)" />
                }
                <div class="post-external-preview-metadata">
                    <h2 class="post-external-preview-title">@(Post.Data.ExternalTitle ?? Post.Data.ExternalUrl)</h2>
                    <div class="post-external-preview-summary">@Post.Data.ExternalDescription</div>
                    <div class="post-external-preview-domain">
                        <svg fill="none" viewBox="0 0 24 24" width="12" height="12" style="transition-property: color, background-color, border-color, text-decoration-color, fill, stroke; transition-timing-function: cubic-bezier(0.17, 0.73, 0.14, 1); transition-duration: 100ms; color: rgb(140, 158, 178);"><path fill="hsl(211, 20%, 62.4%)" fill-rule="evenodd" clip-rule="evenodd" d="M4.4 9.493C4.14 10.28 4 11.124 4 12a8 8 0 1 0 10.899-7.459l-.953 3.81a1 1 0 0 1-.726.727l-3.444.866-.772 1.533a1 1 0 0 1-1.493.35L4.4 9.493Zm.883-1.84L7.756 9.51l.44-.874a1 1 0 0 1 .649-.52l3.306-.832.807-3.227a7.993 7.993 0 0 0-7.676 3.597ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm8.43.162a1 1 0 0 1 .77-.29l1.89.121a1 1 0 0 1 .494.168l2.869 1.928a1 1 0 0 1 .336 1.277l-.973 1.946a1 1 0 0 1-.894.553h-2.92a1 1 0 0 1-.831-.445L9.225 14.5a1 1 0 0 1 .126-1.262l1.08-1.076Zm.915 1.913.177-.177 1.171.074 1.914 1.286-.303.607h-1.766l-1.194-1.79Z"></path></svg>
                        <span>@(StringUtils.TryParseUri(Post.Data.ExternalUrl) is Uri externalUrl ? StringUtils.GetDisplayHost(externalUrl) : null)</span>
                    </div>
                </div>
            </a>
        }
    }

    @if (Post.Data?.Media != null)
    {
        @if (Post.Author.IsMediaBlockedByAdministrativeRule)
        {
            <div class="post-error post-indented">[Media blocked by administrative rules]</div>
        }
        else
        {
            <div class="post-image-list post-indented @(ShouldUseCompactView ? "post-image-list-compact" : null)">

                @{
                    var autoplayIndex = 0;
                }
                @foreach (var (index, image) in Post.Data.Media.Index())
                {
                    @if (image.IsVideo)
                    {
                        var shouldAutoplay = VideoAutoPlay && ++autoplayIndex == 1;
                        <video autoplay="@shouldAutoplay" muted="@shouldAutoplay" class="post-video" controls preload="@(shouldAutoplay ? null : "none")" data-playlisturl="@Apis.GetImageUrl(ThumbnailSize.feed_video_playlist, Post.Did, image.Cid, Post.Author.Pds)" poster="@Apis.GetImageUrl(ThumbnailSize.video_thumbnail, Post.Did, image.Cid, Post.Author.Pds)">
                        </video>
                        if (IsFocalPost)
                        {
                            <meta property="og:video" content="@Apis.GetImageUrl(ThumbnailSize.feed_video_playlist, Post.Did, image.Cid, Post.Author.Pds, Post.Did + "-" + Post.RKey + ".mp4")"> @* helps yt-dlp *@
                            <meta property="og:video:type" content="video/mp4">
                        }
                    }
                    else
                    {
                        <a href="@Apis.GetImageUrl(ReusesThumbForFullSizeImage ? ThumbnailSize.feed_thumbnail : ThumbnailSize.feed_fullsize, Post.Author.Did, image.Cid, Post.Author.Pds)" data-theaterurl="@Post.BaseUrl/media/@(index + 1)" title="@image.AltText" class="post-image-link post-image-for-threater" rel="noreferrer">
                            <img src="@Apis.GetImageThumbnailUrl(Post.Author.Did, image.Cid, Post.Author.Pds)" class="post-image">
                        </a>
                    }
                }
            </div>
        }
    }


    @if (Post.QuotedPost != null && !IsQuote)
    {
        <ul class="post-quoted post-indented">
            <PostRow Post="Post.QuotedPost" IsQuote="true" />
        </ul>

    }

    @if (IsFocalPost)
    {
        <a href="@baseUrlPreferExternal" target="@targetForBaseUrlPreferExternal" class="post-focal-date post-indented">@StringUtils.ToFullHumanDate(Post.Date)</a>

        <div class="post-focal-stats post-indented @(Post.RepostCount != 0 || Post.QuoteCount != 0 || Post.LikeCount != 0 ? null : "display-none")">

            <a href="@Post.BaseUrl/reposts" class="post-stats-reposts-formatted @(IsReposted.ActorCount != 0 ? null : "display-none")"><b class="post-stats-animated">@StringUtils.FormatEngagementCount(@IsReposted.ActorCount)</b> @(@IsReposted.ActorCount == 1 ? "repost" : "reposts")</a>

            <a href="@Post.BaseUrl/quotes" class="post-stats-quotes-formatted @(Post.QuoteCount != 0 ? null : "display-none")"><b class="post-stats-animated">@StringUtils.FormatEngagementCount(Post.QuoteCount)</b> @(@Post.QuoteCount == 1 ? "quote" : "quotes")</a>

            <a href="@Post.BaseUrl/likes" class="post-stats-likes-formatted @(IsLiked.ActorCount != 0 ? null : "display-none")"><b class="post-stats-animated">@StringUtils.FormatEngagementCount(@IsLiked.ActorCount)</b> @(@IsLiked.ActorCount == 1 ? "like" : "likes")</a>
        </div>

    }
    @if (!IsQuote && !IsLastOfGroup && !IsThreadView && Post.PluggableProtocol?.ShouldIncludeFullReplyChain(Post) == true && Post.ReplyChainLength >= 4)
    {
        <div class="post-action-bar-hidden"></div>
    }
    else if (!IsQuote)
    {
        <div class="post-action-bar post-indented">
            <div class="post-action-bar-spacer @(RequestContext.IsLoggedIn ? null : "post-action-bar-disabled")">
                <button actionkind="composeReply" class="post-action-bar-button post-action-bar-button-comment">
                    <svg fill="none" width="18" viewBox="0 0 24 24" height="18" style="color: rgb(111, 134, 159);"><path fill="hsl(211, 20%, 53%)" fill-rule="evenodd" clip-rule="evenodd" d="M2.002 6a3 3 0 0 1 3-3h14a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H12.28l-4.762 2.858A1 1 0 0 1 6.002 21v-2h-1a3 3 0 0 1-3-3V6Zm3-1a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h2a1 1 0 0 1 1 1v1.234l3.486-2.092a1 1 0 0 1 .514-.142h7a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-14Z"></path></svg>
                    <span  class="post-stats-animated">
                        @(Post.ReplyCount != 0 ? @StringUtils.FormatEngagementCount(Post.ReplyCount) : null)
                    </span>
                </button>
            </div>

            <div class="post-action-bar-spacer @(RequestContext.IsLoggedIn ? null : "post-action-bar-disabled")">

                <div class="post-repost-menu menu">
                    <button actionkind="toggleRepost" class="menu-item post-toggle-repost-menu-item">@(IsReposted.HaveRelationship ? "Undo repost" : "Repost")</button>
                    <button actionkind="composeQuote" class="menu-item">Quote post</button>
                </div>
                <button class="post-action-bar-button post-action-bar-button-repost @(IsReposted.HaveRelationship ? "post-action-bar-button-checked" : null)">
                    <svg class="if-have-relationship" fill="none" width="18" viewBox="0 0 24 24" height="18" style="color: rgb(19, 195, 113);"><path fill="hsl(152, 82%, 42%)" fill-rule="evenodd" clip-rule="evenodd" d="M17.957 2.293a1 1 0 1 0-1.414 1.414L17.836 5H6a3 3 0 0 0-3 3v3a1 1 0 1 0 2 0V8a1 1 0 0 1 1-1h11.836l-1.293 1.293a1 1 0 0 0 1.414 1.414l2.47-2.47a1.75 1.75 0 0 0 0-2.474l-2.47-2.47ZM20 12a1 1 0 0 1 1 1v3a3 3 0 0 1-3 3H6.164l1.293 1.293a1 1 0 1 1-1.414 1.414l-2.47-2.47a1.75 1.75 0 0 1 0-2.474l2.47-2.47a1 1 0 0 1 1.414 1.414L6.164 17H18a1 1 0 0 0 1-1v-3a1 1 0 0 1 1-1Z"></path></svg><svg class="if-have-not-relationship" fill="none" width="18" viewBox="0 0 24 24" height="18" style="color: rgb(111, 134, 159);"><path fill="hsl(211, 20%, 53%)" fill-rule="evenodd" clip-rule="evenodd" d="M17.957 2.293a1 1 0 1 0-1.414 1.414L17.836 5H6a3 3 0 0 0-3 3v3a1 1 0 1 0 2 0V8a1 1 0 0 1 1-1h11.836l-1.293 1.293a1 1 0 0 0 1.414 1.414l2.47-2.47a1.75 1.75 0 0 0 0-2.474l-2.47-2.47ZM20 12a1 1 0 0 1 1 1v3a3 3 0 0 1-3 3H6.164l1.293 1.293a1 1 0 1 1-1.414 1.414l-2.47-2.47a1.75 1.75 0 0 1 0-2.474l2.47-2.47a1 1 0 0 1 1.414 1.414L6.164 17H18a1 1 0 0 0 1-1v-3a1 1 0 0 1 1-1Z"></path></svg>
                    <span class="post-stats-animated">
                        @((IsReposted.ActorCount != 0 || Post.QuoteCount != 0) ? @StringUtils.FormatEngagementCount(IsReposted.ActorCount + Post.QuoteCount) : null)
                    </span>
                </button>
            </div>
            <div class="post-action-bar-spacer @(RequestContext.IsLoggedIn ? null : "post-action-bar-disabled")">
                <button actionkind="toggleLike" class="post-action-bar-button post-action-bar-button-like @((UseBookmarkButton ? Post.IsBookmarkedBySelf != null : IsLiked.HaveRelationship) ? "post-action-bar-button-checked" : null)">
                    @if (UseBookmarkButton)
                    {
                        <svg class="if-have-relationship" width="18" height="18" fill="currentColor" stroke="#ec4899" style="color: #ec4899;" stroke-width="0.5" viewBox="-1 -2 20 20"><path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2" /></svg><svg class="if-have-not-relationship" width="18" height="18" fill="currentColor" style="color: rgb(111, 134, 159);" stroke-width="0.5" stroke="rgb(111, 134, 159)" viewBox="-1 -2 20 20"><path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1z" /></svg>
                    }
                    else
                    {
                        <svg class="if-have-relationship" fill="none" width="18" viewBox="0 0 24 24" height="18"><path fill="#ec4899" fill-rule="evenodd" clip-rule="evenodd" d="M12.489 21.372c8.528-4.78 10.626-10.47 9.022-14.47-.779-1.941-2.414-3.333-4.342-3.763-1.697-.378-3.552.003-5.169 1.287-1.617-1.284-3.472-1.665-5.17-1.287-1.927.43-3.562 1.822-4.34 3.764-1.605 4 .493 9.69 9.021 14.47a1 1 0 0 0 .978 0Z"></path></svg><svg class="if-have-not-relationship" fill="none" width="18" viewBox="0 0 24 24" height="18" style="color: rgb(111, 134, 159);"><path fill="hsl(211, 20%, 53%)" fill-rule="evenodd" clip-rule="evenodd" d="M16.734 5.091c-1.238-.276-2.708.047-4.022 1.38a1 1 0 0 1-1.424 0C9.974 5.137 8.504 4.814 7.266 5.09c-1.263.282-2.379 1.206-2.92 2.556C3.33 10.18 4.252 14.84 12 19.348c7.747-4.508 8.67-9.168 7.654-11.7-.541-1.351-1.657-2.275-2.92-2.557Zm4.777 1.812c1.604 4-.494 9.69-9.022 14.47a1 1 0 0 1-.978 0C2.983 16.592.885 10.902 2.49 6.902c.779-1.942 2.414-3.334 4.342-3.764 1.697-.378 3.552.003 5.169 1.286 1.617-1.283 3.472-1.664 5.17-1.286 1.927.43 3.562 1.822 4.34 3.764Z"></path></svg>
                    }
                    <span class="post-stats-animated">
                        @(IsLiked.ActorCount != 0 ? @StringUtils.FormatEngagementCount(IsLiked.ActorCount) : null)
                    </span>
                </button>
            </div>

            <div class="post-action-bar-spacer">

                <div class="post-post-menu menu">

                    @if (HasExternalUrl)
                    {
                        <a href="@originalPostUrl" class="menu-item" target="_blank" rel="noreferrer">View on @StringUtils.GetDisplayHost(new Uri(originalPostUrl!))</a>
                        if (!IsFocalPost)
                        {
                            <a href="@Post.BaseUrl" class="menu-item">View here</a>
                        }
                    }
                    @if (HasBskyAppUrl)
                    {
                        <a href="@Post.BlueskyUrl" class="menu-item" target="_blank" rel="noreferrer">View on Bluesky</a>
                    }




                    @if (HasExternalUrl)
                    {
                        <button actionkind="copyOriginalPostUrl" class="menu-item">Copy original URL</button>
                    }
                    @if (HasBskyAppUrl)
                    {
                        <button actionkind="copyBlueskyPostUrl" class="menu-item">Copy Bluesky URL</button>
                    }
                    <button actionkind="copyPostUrl" class="menu-item">Copy post URL</button>

                    @if (Post.Data?.Text != null)
                    {
                        <button actionkind="translatePost" class="menu-item">Translate post</button>
                    }

                    @if(RequestContext.IsLoggedIn)
                    {
                        <button actionkind="toggleBookmark" class="menu-item">@(Post.IsBookmarkedBySelf != null ? "Remove bookmark" : "Add bookmark")</button>
                    }

                    @if(Post.Data?.Media != null)
                    {
                        foreach (var (index, media) in Post.Data.Media.Index())
                        {

                            <a href="@Apis.GetImageUrl(media.IsVideo ? ThumbnailSize.feed_video_blob : (ReusesThumbForFullSizeImage ? ThumbnailSize.feed_thumbnail : ThumbnailSize.feed_fullsize), Post.Did, media.Cid, Post.Author.Pds, forceProxy: true)" class="menu-item media-download-menu-item" download>Download @(media.IsVideo ? "video" : "image")@(Post.Data.Media.Length != 1 ? " (" + (index + 1) + ")" : null)</a>
                        }

                        if(Post.Data.Media.Any(x => x.IsVideo))
                        {
                            <button actionkind="toggleFastVideoPlayback" class="menu-item">Speed up playback</button>
                        
                        }
                    }

                    @if (RequestContext.IsLoggedIn)
                    {
                        @if (Post.Author.Plc == RequestContext.LoggedInUser)
                        {
                            <button actionkind="deletePost" class="menu-item">Delete</button>
                        }
                        else if(Post.IsRepostedBySelf == null)
                        {
                            @if (Post.IsRepost)
                            {
                                @if (Post.IsSelfRepost)
                                {
                                    <PrivateFollowPostKindToggleButton IsImage="@Post.IsImagePost" ImageFlag="PrivateFollowFlags.MuteImageSelfReposts" TextualFlag="PrivateFollowFlags.MuteTextualSelfReposts" User="@ReposterOrAuthor" />
                                }
                                else
                                {
                                    if(!Post.Author.IsFollowedEvenPrivatelyBySelf)
                                    {
                                        <PrivateFollowPostKindToggleButton IsImage="@Post.IsImagePost" ImageFlag="PrivateFollowFlags.MuteImageNonFollowedReposts" TextualFlag="PrivateFollowFlags.MuteTextualNonFollowedReposts" User="@ReposterOrAuthor" />
                                    }
                                }
                            }

                            if (!Post.IsSelfRepost)
                            {
                                <PrivateFollowPostKindToggleButton IsImage="@Post.IsImagePost" ImageFlag="PrivateFollowFlags.MuteImagePosts" TextualFlag="PrivateFollowFlags.MuteTextualPosts" User="@OriginalAuthor" />
                            }

                            if (externalDomainForMute != null)
                            {
                                var isMutedByDomain = Post.MutedByRule?.Word == externalDomainForMute;
                                <button actionkind="muteDomain" class="menu-item" data-mutedomain="@externalDomainForMute" data-ismuted="@(isMutedByDomain ? "1" : "0")">@(isMutedByDomain ? "Unmute" : "Mute") links to @externalDomainForMute</button>
                            }

                            if (Post.Data?.Text != null)
                            {
                                <a href="/settings/mute?did=@(Uri.EscapeDataString(ReposterOrAuthor.Did))" class="menu-item">Specify words to muteâ¦</a>
                            }
                        }
                    }
                    @if (Post.PluggableProtocol == null)
                    {
                        <a href="@Post.BaseUrl/all-labels" class="menu-item menu-item-advanced">Show all post labels</a>
                    }
                </div>
                
                <button class="post-action-bar-button">
                    <svg fill="none" viewBox="0 0 24 24" width="20" height="20"><path fill="hsl(211, 20%, 53%)" fill-rule="evenodd" clip-rule="evenodd" d="M2 12a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm16 0a2 2 0 1 1 4 0 2 2 0 0 1-4 0Zm-6-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z"></path></svg>
                </button>
            </div>
        </div>
    }
    @if (IsFocalPost && RequestContext.IsLoggedIn)
    {
        <div class="post-focal-compose-reply-container post-indented">
            <a href="/compose?replyDid=@(Post.Did)&replyRkey=@(Post.RKey)" class="post-focal-compose-reply">
                <img src="@RequestContext.Session.Profile!.AvatarUrl" class="profile-image-small">
                Write your reply
            </a>
        </div>
    }
</li>

@if (IsLastOfGroup)
{
    <div class="post-group-separator"></div>    
}
